https://www.cnblogs.com/songhaibin/p/13382799.html

2.比较
2.1 BeanUtils

2.2 BeanCopier

cglib的BeanCopier采用了不同的方法：它不是利用反射对属性进行赋值，而是直接使用ASM的MethodVisitor直接编写各属性的get/set方法
（具体过程可见BeanCopier类的generateClass(ClassVisitor v)方法）生成class文件，然后进行执行。由于是直接生成字节码执行，
所以BeanCopier的性能较采用反射的BeanUtils有较大提高，这一点可在后面的测试中看出。
 
2.3 Dozer
使用以上类库虽然可以不用手动编写get/set方法，但是他们都不能对不同名称的对象属性进行映射。在定制化的属性映射方面做得比较好的有Dozer，
Dozer支持简单属性映射、复杂类型映射、双向映射、隐式映射以及递归映射。可使用xml或者注解进行映射的配置，支持自动类型转换，使用方便。
但Dozer底层是使用reflect包下Field类的set(Object obj, Object value)方法进行属性赋值，执行速度上不是那么理想。

2.4 Orika
那么有没有特性丰富，速度又快的Bean映射工具呢，这就是下面要介绍的Orika，Orika是近期在github活跃的项目，
底层采用了javassist类库生成Bean映射的字节码，之后直接加载执行生成的字节码文件，因此在速度上比使用反射进行赋值会快很多，
下面详细介绍Orika的使用方法。



Benchmark                     Mode  Samples   Score  Score error  Units  
o.s.MyBenchmark.apache        avgt      100  25.246        0.535  us/op  
o.s.MyBenchmark.beanCopier    avgt      100   0.004        0.000  us/op  
o.s.MyBenchmark.byHand        avgt      100   0.004        0.000  us/op  
o.s.MyBenchmark.dozer         avgt      100   5.855        0.260  us/op  
o.s.MyBenchmark.orika         avgt      100   0.353        0.017  us/op  
o.s.MyBenchmark.spring        avgt      100   0.627        0.020  us/op  